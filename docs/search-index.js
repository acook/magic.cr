crystal_doc_search_index_callback({"repository_name":"github.com/dscottboggs/magic.cr","body":"# magic.cr\n\nBindings to `libmagic(2)` for Crystal.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  magic.cr:\n    github: dscottboggs/magic.cr\n```\n\n## Usage\n\n[API documentation](https://dscottboggs.github.io/magic.cr/index.html)\n\n```crystal\nrequire \"magic.cr\"\nrequire \"http\" # for the HTTP example\n\nTestImageURL = \"https://upload.wikimedia.org/wikipedia/commons/d/db/Patern_test.jpg\"\n\n# get a description of the contents of the file at a path.\nMagic.filetype.of \"/path/to/a/video.mkv\" # => \"Matroska data\"\n\n# open your bashrc and check its mime type\nFile.open \"~/.bashrc\" do |bashrc|\n  Magic.mime_type.of bashrc # => \"text/plain\"\nend\n\n# pull TestImageURL from the web and find out what the valid extensions are for\n# the bytes received.\nHTTP::Client.get TestImageURL do |result|\n  Magic.filetype.extensions result.body_io # => Set{\"jpeg\", \"jpg\", \"jpe\", \"jfif\"}\nend\n\n# change a setting and check a filetype\ndir = Dir.open \"/dev/disk/by-uuid\"\ndir.each_child do |symlink|\n  Magic.filetype.of symlink # => \"symlink to /dev/sdXX\"\nend\n\ndir.each_child do |symlink|\n  Magic.filetype.follow_symlinks.for symlink # => \"block special...\"\nend\n```\n\nThere is also a much more flexible and complicated API for more advanced usage.\nFor more information and some examples, see `Magic::TypeChecker` and\n`spec/magic.cr_spec.cr`.\n\n## Development\n\nCreate an issue if you think anything needs revision!\n\n## Contributing\n\n1. Fork it (<https://github.com/dscottboggs/magic.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [dscottboggs](https://github.com/dscottboggs) D. Scott Boggs - creator, maintainer\n","program":{"html_id":"github.com/dscottboggs/magic.cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/dscottboggs/magic.cr","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/dscottboggs/magic.cr/Magic","path":"Magic.html","kind":"module","full_name":"Magic","name":"Magic","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"libmagic/regex.cr","line_number":1,"url":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/libmagic/regex.cr"},{"filename":"libmagic/file.cr","line_number":3,"url":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/libmagic/file.cr"},{"filename":"libmagic/magic.cr","line_number":3,"url":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/libmagic/magic.cr"},{"filename":"type_checker.cr","line_number":5,"url":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr"},{"filename":"magic.cr","line_number":5,"url":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/magic.cr"}],"repository_name":"github.com/dscottboggs/magic.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"github.com/dscottboggs/magic.cr/Magic","kind":"module","full_name":"Magic","name":"Magic"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"filetype-instance-method","html_id":"filetype-instance-method","name":"filetype","doc":"Get the filetype of the given File object, filepath, file descriptor, or\nbyte stream (IO) as a plain, human-readable string.","summary":"<p>Get the filetype of the given File object, filepath, file descriptor, or byte stream (IO) as a plain, human-readable string.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/magic.cr#L13","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/magic.cr#L13","def":{"name":"filetype","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(@@checker || (@@checker = Magic::TypeChecker.new)).reset_options"}},{"id":"mime_type-instance-method","html_id":"mime_type-instance-method","name":"mime_type","doc":"Get the mime-type of the given File object, filepath, file descriptor, or\nbyte stream (IO). This is the easiest to use if you're comparing the\nfiletypes of several files.","summary":"<p>Get the mime-type of the given File object, filepath, file descriptor, or byte stream (IO).</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/magic.cr#L20","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/magic.cr#L20","def":{"name":"mime_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(@@checker || (@@checker = Magic::TypeChecker.new)).reset_options.get_mime_type"}}],"macros":[],"types":[{"html_id":"github.com/dscottboggs/magic.cr/Magic/Errno","path":"Magic/Errno.html","kind":"class","full_name":"Magic::Errno","name":"Errno","abstract":false,"superclass":{"html_id":"github.com/dscottboggs/magic.cr/Errno","kind":"class","full_name":"Errno","name":"Errno"},"ancestors":[{"html_id":"github.com/dscottboggs/magic.cr/Errno","kind":"class","full_name":"Errno","name":"Errno"},{"html_id":"github.com/dscottboggs/magic.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/dscottboggs/magic.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dscottboggs/magic.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"type_checker.cr","line_number":6,"url":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr"}],"repository_name":"github.com/dscottboggs/magic.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/dscottboggs/magic.cr/Magic","kind":"module","full_name":"Magic","name":"Magic"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(msg,checker)-class-method","html_id":"new(msg,checker)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"msg","doc":null,"default_value":"","external_name":"msg","restriction":""},{"name":"checker","doc":null,"default_value":"","external_name":"checker","restriction":""}],"args_string":"(msg, checker)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L7","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L7","def":{"name":"new","args":[{"name":"msg","doc":null,"default_value":"","external_name":"msg","restriction":""},{"name":"checker","doc":null,"default_value":"","external_name":"checker","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(msg, checker)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/dscottboggs/magic.cr/Magic/TypeChecker","path":"Magic/TypeChecker.html","kind":"class","full_name":"Magic::TypeChecker","name":"TypeChecker","abstract":false,"superclass":{"html_id":"github.com/dscottboggs/magic.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/dscottboggs/magic.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dscottboggs/magic.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"type_checker.cr","line_number":52,"url":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr"}],"repository_name":"github.com/dscottboggs/magic.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT_OPTIONS","name":"DEFAULT_OPTIONS","value":"LibMagic::RAW | LibMagic::ERROR","doc":null,"summary":null},{"id":"Integer","name":"Integer","value":"((((((Int8 | Int16) | Int32) | Int64) | UInt8) | UInt16) | UInt32) | UInt64","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/dscottboggs/magic.cr/Magic","kind":"module","full_name":"Magic","name":"Magic"},"doc":"A TypeChecker checks the Magic database on the system for a given file,\nfilepath, file descriptor, or byte stream (IO) on its `.of` instance method.\nIt contains methods for changing how its output is given. While the primary\nuse cases for this module can be performed with the module-level functions,\ninstances of TypeChecker provide the full flexibility of libmagic in a\nsyntax that still makes sense in crystal.\n\n#### Examples:\n\n```\n# get all matching mime types and the encoding from a series of files\nmime_types = TypeChecker.new.all_types.get_mime_type.get_mime_encoding\n\ndef type_of_each(files : Indexable(File) | Set(File))\n  files.each do |file|\n    # and yield the list of mimes to a block\n    yield mime_types.of(file).split('\\n')\n  end\nend\n\n# alternately, return the list of mimes.\ndef types_of_each(files)\n  files.each do |file|\n    mime_types.of(file).split(\"\\n\")\n  end\nend\n\n# do the same thing but now follow symbolic links\ndef types_of_each(files)\n  mime_types.follow_symlinks\n  files.each do |file|\n    yield mime_types.of(file).split(\"\\n\")\n  end\n  mime_types.follow_symlinks = false\nend\n```\n","summary":"<p>A TypeChecker checks the Magic database on the system for a given file, filepath, file descriptor, or byte stream (IO) on its <code><a href=\"../Magic/TypeChecker.html#of%28file%3AFile%29-instance-method\">.of</a></code> instance method.</p>","class_methods":[],"constructors":[{"id":"new(options=DEFAULT_OPTIONS,database_files:IterableOfStrings?=nil,limit_settings:Hash(Limit,Int32)?=nil)-class-method","html_id":"new(options=DEFAULT_OPTIONS,database_files:IterableOfStrings?=nil,limit_settings:Hash(Limit,Int32)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"DEFAULT_OPTIONS","external_name":"options","restriction":""},{"name":"database_files","doc":null,"default_value":"nil","external_name":"database_files","restriction":"IterableOfStrings | ::Nil"},{"name":"limit_settings","doc":null,"default_value":"nil","external_name":"limit_settings","restriction":"Hash(Limit, Int32) | ::Nil"}],"args_string":"(options = <span class=\"t\">DEFAULT_OPTIONS</span>, database_files : IterableOfStrings? = <span class=\"n\">nil</span>, limit_settings : Hash(Limit, Int32)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L67","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L67","def":{"name":"new","args":[{"name":"options","doc":null,"default_value":"DEFAULT_OPTIONS","external_name":"options","restriction":""},{"name":"database_files","doc":null,"default_value":"nil","external_name":"database_files","restriction":"IterableOfStrings | ::Nil"},{"name":"limit_settings","doc":null,"default_value":"nil","external_name":"limit_settings","restriction":"Hash(Limit, Int32) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(options, database_files, limit_settings)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"all_types-instance-method","html_id":"all_types-instance-method","name":"all_types","doc":"Return all matches, not just the first.","summary":"<p>Return all matches, not just the first.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L356","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L356","def":{"name":"all_types","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::CONTINUE)\nself\n"}},{"id":"all_types=(setting:Bool)-instance-method","html_id":"all_types=(setting:Bool)-instance-method","name":"all_types=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L356","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L356","def":{"name":"all_types=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::CONTINUE)\nelse\n  unset(LibMagic::CONTINUE)\nend\nself\n"}},{"id":"all_types?-instance-method","html_id":"all_types?-instance-method","name":"all_types?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L356","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L356","def":{"name":"all_types?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::CONTINUE)"}},{"id":"apple-instance-method","html_id":"apple-instance-method","name":"apple","doc":"Return the Apple creator and type.","summary":"<p>Return the Apple creator and type.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L374","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L374","def":{"name":"apple","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::APPLE)\nself\n"}},{"id":"apple=(setting:Bool)-instance-method","html_id":"apple=(setting:Bool)-instance-method","name":"apple=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L374","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L374","def":{"name":"apple=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::APPLE)\nelse\n  unset(LibMagic::APPLE)\nend\nself\n"}},{"id":"apple?-instance-method","html_id":"apple?-instance-method","name":"apple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L374","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L374","def":{"name":"apple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::APPLE)"}},{"id":"check_db-instance-method","html_id":"check_db-instance-method","name":"check_db","doc":"Check the magic database for consistency and printwarnings to stderr, while checking a file.","summary":"<p>Check the magic database for consistency and printwarnings to stderr, while checking a file.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L360","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L360","def":{"name":"check_db","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::CHECK)\nself\n"}},{"id":"check_db=(setting:Bool)-instance-method","html_id":"check_db=(setting:Bool)-instance-method","name":"check_db=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L360","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L360","def":{"name":"check_db=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::CHECK)\nelse\n  unset(LibMagic::CHECK)\nend\nself\n"}},{"id":"check_db?-instance-method","html_id":"check_db?-instance-method","name":"check_db?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L360","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L360","def":{"name":"check_db?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::CHECK)"}},{"id":"check_device-instance-method","html_id":"check_device-instance-method","name":"check_device","doc":"If the file is a block or character special device, thenopen the device and try to look in its contents.","summary":"<p>If the file is a block or character special device, thenopen the device and try to look in its contents.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L339","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L339","def":{"name":"check_device","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::DEVICES)\nself\n"}},{"id":"check_device=(setting:Bool)-instance-method","html_id":"check_device=(setting:Bool)-instance-method","name":"check_device=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L339","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L339","def":{"name":"check_device=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::DEVICES)\nelse\n  unset(LibMagic::DEVICES)\nend\nself\n"}},{"id":"check_device?-instance-method","html_id":"check_device?-instance-method","name":"check_device?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L339","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L339","def":{"name":"check_device?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::DEVICES)"}},{"id":"checker=(chkr:LibMagic::MagicT)-instance-method","html_id":"checker=(chkr:LibMagic::MagicT)-instance-method","name":"checker=","doc":"Manually set the checker to a given LibMagic::MagicT (libmagic's magic_t).\nThis also reloads the datase, so no need to do that manually. If the given\nMagicT is a null pointer, this will raise Errno.","summary":"<p>Manually set the checker to a given LibMagic::MagicT (libmagic's magic_t).</p>","abstract":false,"args":[{"name":"chkr","doc":null,"default_value":"","external_name":"chkr","restriction":"LibMagic::MagicT"}],"args_string":"(chkr : LibMagic::MagicT)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L95","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L95","def":{"name":"checker=","args":[{"name":"chkr","doc":null,"default_value":"","external_name":"chkr","restriction":"LibMagic::MagicT"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if chkr === @checker\n  return\nend\nLibMagic.close(@checker)\n@checker = chkr\nif @checker.null?\n  raise(error(\"opening the magic cookie\"))\nend\nLibMagic.open(@checker)\nLibMagic.load(@checker, @db_files)\nchecker\n"}},{"id":"db_files:Set(String)?-instance-method","html_id":"db_files:Set(String)?-instance-method","name":"db_files","doc":"database files to read from","summary":"<p>database files to read from</p>","abstract":false,"args":[],"args_string":" : Set(String)?","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L54","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L54","def":{"name":"db_files","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Set(String) | ::Nil","visibility":"Public","body":"@db_files"}},{"id":"db_files=(files:IterableOfStrings)-instance-method","html_id":"db_files=(files:IterableOfStrings)-instance-method","name":"db_files=","doc":"Load a new set of database files into the magic database. Setting this to\n:default sets the database to the value of the MAGIC environment variable,\nor, failing that, the default database, usually at\n`/usr/share/misc/magic`. Example:\n```\ncheck_ft = Magic::TypeChecker.new\ncheck_ft.database = [ \"/path/to/file\", File.join(\"other\", \"path\")]\n...\ncheck_ft.database = :default\n```","summary":"<p>Load a new set of database files into the magic database.</p>","abstract":false,"args":[{"name":"files","doc":null,"default_value":"","external_name":"files","restriction":"IterableOfStrings"}],"args_string":"(files : IterableOfStrings)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L122","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L122","def":{"name":"db_files=","args":[{"name":"files","doc":null,"default_value":"","external_name":"files","restriction":"IterableOfStrings"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibMagic.load(checker, (@db_files = files.to_set).join(\":\"))"}},{"id":"debug_output-instance-method","html_id":"debug_output-instance-method","name":"debug_output","doc":"Have `libmagic(2)` print debugging messages to stderr.","summary":"<p>Have <code>libmagic(2)</code> print debugging messages to stderr.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L327","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L327","def":{"name":"debug_output","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::DEBUG)\nself\n"}},{"id":"debug_output=(setting:Bool)-instance-method","html_id":"debug_output=(setting:Bool)-instance-method","name":"debug_output=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L327","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L327","def":{"name":"debug_output=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::DEBUG)\nelse\n  unset(LibMagic::DEBUG)\nend\nself\n"}},{"id":"debug_output?-instance-method","html_id":"debug_output?-instance-method","name":"debug_output?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L327","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L327","def":{"name":"debug_output?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::DEBUG)"}},{"id":"default_options?-instance-method","html_id":"default_options?-instance-method","name":"default_options?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L240","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L240","def":{"name":"default_options?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@new_options == DEFAULT_OPTIONS"}},{"id":"error(msg)-instance-method","html_id":"error(msg)-instance-method","name":"error","doc":null,"summary":null,"abstract":false,"args":[{"name":"msg","doc":null,"default_value":"","external_name":"msg","restriction":""}],"args_string":"(msg)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L137","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L137","def":{"name":"error","args":[{"name":"msg","doc":null,"default_value":"","external_name":"msg","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Errno.new(msg, @checker)"}},{"id":"escape_unprintable-instance-method","html_id":"escape_unprintable-instance-method","name":"escape_unprintable","doc":"escapes non-printable bytes as their `ooo` numeric forms.By default crystal handles this in cases where it's important (in`puts` for example), so by default strings contain the raw values forunprintable characters. (this differs from the `libmagic` default).","summary":"<p>escapes non-printable bytes as their <code>ooo</code> numeric forms.By default crystal handles this in cases where it's important (in<code>puts</code> for example), so by default strings contain the raw values forunprintable characters.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L311","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L311","def":{"name":"escape_unprintable","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"unset(LibMagic::RAW)\nself\n"}},{"id":"escape_unprintable=(setting:Bool)-instance-method","html_id":"escape_unprintable=(setting:Bool)-instance-method","name":"escape_unprintable=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L311","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L311","def":{"name":"escape_unprintable=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  unset(LibMagic::RAW)\nelse\n  set(LibMagic::RAW)\nend\nself\n"}},{"id":"escape_unprintable?-instance-method","html_id":"escape_unprintable?-instance-method","name":"escape_unprintable?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L311","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L311","def":{"name":"escape_unprintable?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(set?(LibMagic::RAW))"}},{"id":"extensions(this)-instance-method","html_id":"extensions(this)-instance-method","name":"extensions","doc":null,"summary":null,"abstract":false,"args":[{"name":"this","doc":null,"default_value":"","external_name":"this","restriction":""}],"args_string":"(this)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L205","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L205","def":{"name":"extensions","args":[{"name":"this","doc":null,"default_value":"","external_name":"this","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = [] of String\nif get_extensions?\n  result = (of(this)).split(\"/\")\nelse\n  get_extensions\n  result = (of(this)).split(\"/\")\n  get_extensions = false\nend\nresult.to_set\n"}},{"id":"follow_symlinks-instance-method","html_id":"follow_symlinks-instance-method","name":"follow_symlinks","doc":"If the file queried is a symlink, follow it.","summary":"<p>If the file queried is a symlink, follow it.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L331","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L331","def":{"name":"follow_symlinks","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::SYMLINK)\nself\n"}},{"id":"follow_symlinks=(setting:Bool)-instance-method","html_id":"follow_symlinks=(setting:Bool)-instance-method","name":"follow_symlinks=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L331","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L331","def":{"name":"follow_symlinks=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::SYMLINK)\nelse\n  unset(LibMagic::SYMLINK)\nend\nself\n"}},{"id":"follow_symlinks?-instance-method","html_id":"follow_symlinks?-instance-method","name":"follow_symlinks?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L331","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L331","def":{"name":"follow_symlinks?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::SYMLINK)"}},{"id":"for(this)-instance-method","html_id":"for(this)-instance-method","name":"for","doc":"same as `#of()`","summary":"<p>same as <code><a href=\"../Magic/TypeChecker.html#of%28file%3AFile%29-instance-method\">#of</a>()</code></p>","abstract":false,"args":[{"name":"this","doc":null,"default_value":"","external_name":"this","restriction":""}],"args_string":"(this)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L201","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L201","def":{"name":"for","args":[{"name":"this","doc":null,"default_value":"","external_name":"this","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"of(this)"}},{"id":"get_extensions-instance-method","html_id":"get_extensions-instance-method","name":"get_extensions","doc":"Makes #of() return a slash-separated list of extensions for this file type.","summary":"<p>Makes #of() return a slash-separated list of extensions for this file type.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L378","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L378","def":{"name":"get_extensions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::EXTENSION)\nself\n"}},{"id":"get_extensions=(setting:Bool)-instance-method","html_id":"get_extensions=(setting:Bool)-instance-method","name":"get_extensions=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L378","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L378","def":{"name":"get_extensions=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::EXTENSION)\nelse\n  unset(LibMagic::EXTENSION)\nend\nself\n"}},{"id":"get_extensions?-instance-method","html_id":"get_extensions?-instance-method","name":"get_extensions?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L378","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L378","def":{"name":"get_extensions?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::EXTENSION)"}},{"id":"get_mime_encoding-instance-method","html_id":"get_mime_encoding-instance-method","name":"get_mime_encoding","doc":"Return a MIME encoding, instead of a textual description.","summary":"<p>Return a MIME encoding, instead of a textual description.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L348","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L348","def":{"name":"get_mime_encoding","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::MIME_ENCODING)\nself\n"}},{"id":"get_mime_encoding=(setting:Bool)-instance-method","html_id":"get_mime_encoding=(setting:Bool)-instance-method","name":"get_mime_encoding=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L348","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L348","def":{"name":"get_mime_encoding=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::MIME_ENCODING)\nelse\n  unset(LibMagic::MIME_ENCODING)\nend\nself\n"}},{"id":"get_mime_encoding?-instance-method","html_id":"get_mime_encoding?-instance-method","name":"get_mime_encoding?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L348","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L348","def":{"name":"get_mime_encoding?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::MIME_ENCODING)"}},{"id":"get_mime_type-instance-method","html_id":"get_mime_type-instance-method","name":"get_mime_type","doc":"Return a MIME type string, instead of a textual description.","summary":"<p>Return a MIME type string, instead of a textual description.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L344","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L344","def":{"name":"get_mime_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::MIME_TYPE)\nself\n"}},{"id":"get_mime_type=(setting:Bool)-instance-method","html_id":"get_mime_type=(setting:Bool)-instance-method","name":"get_mime_type=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L344","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L344","def":{"name":"get_mime_type=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::MIME_TYPE)\nelse\n  unset(LibMagic::MIME_TYPE)\nend\nself\n"}},{"id":"get_mime_type?-instance-method","html_id":"get_mime_type?-instance-method","name":"get_mime_type?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L344","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L344","def":{"name":"get_mime_type?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::MIME_TYPE)"}},{"id":"get_mime_type_and_encoding-instance-method","html_id":"get_mime_type_and_encoding-instance-method","name":"get_mime_type_and_encoding","doc":"sets both `get_mime_type` and `get_mime_encoding`","summary":"<p>sets both <code><a href=\"../Magic/TypeChecker.html#get_mime_type-instance-method\">#get_mime_type</a></code> and <code><a href=\"../Magic/TypeChecker.html#get_mime_encoding-instance-method\">#get_mime_encoding</a></code></p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L352","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L352","def":{"name":"get_mime_type_and_encoding","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::MIME)\nself\n"}},{"id":"get_mime_type_and_encoding=(setting:Bool)-instance-method","html_id":"get_mime_type_and_encoding=(setting:Bool)-instance-method","name":"get_mime_type_and_encoding=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L352","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L352","def":{"name":"get_mime_type_and_encoding=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::MIME)\nelse\n  unset(LibMagic::MIME)\nend\nself\n"}},{"id":"get_mime_type_and_encoding?-instance-method","html_id":"get_mime_type_and_encoding?-instance-method","name":"get_mime_type_and_encoding?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L352","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L352","def":{"name":"get_mime_type_and_encoding?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::MIME)"}},{"id":"libmagic_defaults-instance-method","html_id":"libmagic_defaults-instance-method","name":"libmagic_defaults","doc":"use the MAGIC_NONE option (the default for libmagic) instead of the\ndefault for magic.cr","summary":"<p>use the MAGIC_NONE option (the default for libmagic) instead of the default for magic.cr</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L246","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L246","def":{"name":"libmagic_defaults","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@new_options = LibMagic::NONE\nself\n"}},{"id":"libmagic_defaults?-instance-method","html_id":"libmagic_defaults?-instance-method","name":"libmagic_defaults?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L251","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L251","def":{"name":"libmagic_defaults?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@new_options == LibMagic::NONE"}},{"id":"look_into_compressed_files-instance-method","html_id":"look_into_compressed_files-instance-method","name":"look_into_compressed_files","doc":"If the file is compressed, unpack it and look at the contents.","summary":"<p>If the file is compressed, unpack it and look at the contents.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L335","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L335","def":{"name":"look_into_compressed_files","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::COMPRESS)\nself\n"}},{"id":"look_into_compressed_files=(setting:Bool)-instance-method","html_id":"look_into_compressed_files=(setting:Bool)-instance-method","name":"look_into_compressed_files=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L335","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L335","def":{"name":"look_into_compressed_files=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::COMPRESS)\nelse\n  unset(LibMagic::COMPRESS)\nend\nself\n"}},{"id":"look_into_compressed_files?-instance-method","html_id":"look_into_compressed_files?-instance-method","name":"look_into_compressed_files?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L335","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L335","def":{"name":"look_into_compressed_files?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::COMPRESS)"}},{"id":"max_bytes(&block)-instance-method","html_id":"max_bytes(&amp;block)-instance-method","name":"max_bytes","doc":"Yields the current value of the max_bytes to the block, then\nsets the value to the result of the block, unless the block returns\nnil, of course.  Example:\n```\n# doubles the PARAM_BYTES_MAX limit\nft_checker = Magic::TypeChecker.new\nft_checker.max_bytes do |current|\n  current * 2\nend\n```","summary":"<p>Yields the current value of the max_bytes to the block, then sets the value to the result of the block, unless the block returns nil, of course.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L458","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L458","def":{"name":"max_bytes","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_BYTES_MAX) do |curr|\n  yield curr\nend\nself\n"}},{"id":"max_bytes-instance-method","html_id":"max_bytes-instance-method","name":"max_bytes","doc":"Get the current limit of the\nLibMagic::PARAM_BYTES_MAX libmagic param.\nDefaults to 1048576. This is the same as calling\nmagic_getparam and passing in the\nPARAM_BYTES_MAX constant. See `libmagic(2)`.\n","summary":"<p>Get the current limit of the LibMagic::PARAM_BYTES_MAX libmagic param.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L458","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L458","def":{"name":"max_bytes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibMagic.get_param(@checker, LibMagic::PARAM_BYTES_MAX, out value)\nvalue\n"}},{"id":"max_bytes=(value:Int32)-instance-method","html_id":"max_bytes=(value:Int32)-instance-method","name":"max_bytes=","doc":"Limit LibMagic::PARAM_BYTES_MAX to the\ngiven value. This is equivalent to calling `magic_setparam` and passing\nit the constant PARAM_BYTES_MAX and the\ngiven value. See `libmagic(2)`. ","summary":"<p>Limit LibMagic::PARAM_BYTES_MAX to the given value.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L458","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L458","def":{"name":"max_bytes=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_BYTES_MAX, to: value)\nself\n"}},{"id":"max_elf_notes-instance-method","html_id":"max_elf_notes-instance-method","name":"max_elf_notes","doc":"Get the current limit of the\nLibMagic::PARAM_ELF_NOTES_MAX libmagic param.\nDefaults to 256. This is the same as calling\nmagic_getparam and passing in the\nPARAM_ELF_NOTES_MAX constant. See `libmagic(2)`.\nControls how many ELF notes will be processed.","summary":"<p>Get the current limit of the LibMagic::PARAM_ELF_NOTES_MAX libmagic param.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L448","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L448","def":{"name":"max_elf_notes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibMagic.get_param(@checker, LibMagic::PARAM_ELF_NOTES_MAX, out value)\nvalue\n"}},{"id":"max_elf_notes(&block)-instance-method","html_id":"max_elf_notes(&amp;block)-instance-method","name":"max_elf_notes","doc":"Yields the current value of the max_elf_notes to the block, then\nsets the value to the result of the block, unless the block returns\nnil, of course. Controls how many ELF notes will be processed. Example:\n```\n# doubles the PARAM_ELF_NOTES_MAX limit\nft_checker = Magic::TypeChecker.new\nft_checker.max_elf_notes do |current|\n  current * 2\nend\n```","summary":"<p>Yields the current value of the max_elf_notes to the block, then sets the value to the result of the block, unless the block returns nil, of course.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L448","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L448","def":{"name":"max_elf_notes","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_ELF_NOTES_MAX) do |curr|\n  yield curr\nend\nself\n"}},{"id":"max_elf_notes=(value:Int32)-instance-method","html_id":"max_elf_notes=(value:Int32)-instance-method","name":"max_elf_notes=","doc":"Limit LibMagic::PARAM_ELF_NOTES_MAX to the\ngiven value. This is equivalent to calling `magic_setparam` and passing\nit the constant PARAM_ELF_NOTES_MAX and the\ngiven value. See `libmagic(2)`. Controls how many ELF notes will be processed.","summary":"<p>Limit LibMagic::PARAM_ELF_NOTES_MAX to the given value.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L448","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L448","def":{"name":"max_elf_notes=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_ELF_NOTES_MAX, to: value)\nself\n"}},{"id":"max_elf_phnum-instance-method","html_id":"max_elf_phnum-instance-method","name":"max_elf_phnum","doc":"Get the current limit of the\nLibMagic::PARAM_ELF_PHNUM_MAX libmagic param.\nDefaults to 128. This is the same as calling\nmagic_getparam and passing in the\nPARAM_ELF_PHNUM_MAX constant. See `libmagic(2)`.\nControls how many ELF program sections will be processed.","summary":"<p>Get the current limit of the LibMagic::PARAM_ELF_PHNUM_MAX libmagic param.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L451","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L451","def":{"name":"max_elf_phnum","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibMagic.get_param(@checker, LibMagic::PARAM_ELF_PHNUM_MAX, out value)\nvalue\n"}},{"id":"max_elf_phnum(&block)-instance-method","html_id":"max_elf_phnum(&amp;block)-instance-method","name":"max_elf_phnum","doc":"Yields the current value of the max_elf_phnum to the block, then\nsets the value to the result of the block, unless the block returns\nnil, of course. Controls how many ELF program sections will be processed. Example:\n```\n# doubles the PARAM_ELF_PHNUM_MAX limit\nft_checker = Magic::TypeChecker.new\nft_checker.max_elf_phnum do |current|\n  current * 2\nend\n```","summary":"<p>Yields the current value of the max_elf_phnum to the block, then sets the value to the result of the block, unless the block returns nil, of course.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L451","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L451","def":{"name":"max_elf_phnum","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_ELF_PHNUM_MAX) do |curr|\n  yield curr\nend\nself\n"}},{"id":"max_elf_phnum=(value:Int32)-instance-method","html_id":"max_elf_phnum=(value:Int32)-instance-method","name":"max_elf_phnum=","doc":"Limit LibMagic::PARAM_ELF_PHNUM_MAX to the\ngiven value. This is equivalent to calling `magic_setparam` and passing\nit the constant PARAM_ELF_PHNUM_MAX and the\ngiven value. See `libmagic(2)`. Controls how many ELF program sections will be processed.","summary":"<p>Limit LibMagic::PARAM_ELF_PHNUM_MAX to the given value.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L451","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L451","def":{"name":"max_elf_phnum=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_ELF_PHNUM_MAX, to: value)\nself\n"}},{"id":"max_elf_shnum-instance-method","html_id":"max_elf_shnum-instance-method","name":"max_elf_shnum","doc":"Get the current limit of the\nLibMagic::PARAM_ELF_SHNUM_MAX libmagic param.\nDefaults to 32768. This is the same as calling\nmagic_getparam and passing in the\nPARAM_ELF_SHNUM_MAX constant. See `libmagic(2)`.\nControls how many ELF sections will be processed.","summary":"<p>Get the current limit of the LibMagic::PARAM_ELF_SHNUM_MAX libmagic param.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L454","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L454","def":{"name":"max_elf_shnum","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibMagic.get_param(@checker, LibMagic::PARAM_ELF_SHNUM_MAX, out value)\nvalue\n"}},{"id":"max_elf_shnum(&block)-instance-method","html_id":"max_elf_shnum(&amp;block)-instance-method","name":"max_elf_shnum","doc":"Yields the current value of the max_elf_shnum to the block, then\nsets the value to the result of the block, unless the block returns\nnil, of course. Controls how many ELF sections will be processed. Example:\n```\n# doubles the PARAM_ELF_SHNUM_MAX limit\nft_checker = Magic::TypeChecker.new\nft_checker.max_elf_shnum do |current|\n  current * 2\nend\n```","summary":"<p>Yields the current value of the max_elf_shnum to the block, then sets the value to the result of the block, unless the block returns nil, of course.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L454","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L454","def":{"name":"max_elf_shnum","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_ELF_SHNUM_MAX) do |curr|\n  yield curr\nend\nself\n"}},{"id":"max_elf_shnum=(value:Int32)-instance-method","html_id":"max_elf_shnum=(value:Int32)-instance-method","name":"max_elf_shnum=","doc":"Limit LibMagic::PARAM_ELF_SHNUM_MAX to the\ngiven value. This is equivalent to calling `magic_setparam` and passing\nit the constant PARAM_ELF_SHNUM_MAX and the\ngiven value. See `libmagic(2)`. Controls how many ELF sections will be processed.","summary":"<p>Limit LibMagic::PARAM_ELF_SHNUM_MAX to the given value.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L454","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L454","def":{"name":"max_elf_shnum=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_ELF_SHNUM_MAX, to: value)\nself\n"}},{"id":"max_indir-instance-method","html_id":"max_indir-instance-method","name":"max_indir","doc":"Get the current limit of the\nLibMagic::PARAM_INDIR_MAX libmagic param.\nDefaults to 15. This is the same as calling\nmagic_getparam and passing in the\nPARAM_INDIR_MAX constant. See `libmagic(2)`.\nControls how many levels of recursion will be followed forindirect magic entries.","summary":"<p>Get the current limit of the LibMagic::PARAM_INDIR_MAX libmagic param.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L441","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L441","def":{"name":"max_indir","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibMagic.get_param(@checker, LibMagic::PARAM_INDIR_MAX, out value)\nvalue\n"}},{"id":"max_indir(&block)-instance-method","html_id":"max_indir(&amp;block)-instance-method","name":"max_indir","doc":"Yields the current value of the max_indir to the block, then\nsets the value to the result of the block, unless the block returns\nnil, of course. Controls how many levels of recursion will be followed forindirect magic entries. Example:\n```\n# doubles the PARAM_INDIR_MAX limit\nft_checker = Magic::TypeChecker.new\nft_checker.max_indir do |current|\n  current * 2\nend\n```","summary":"<p>Yields the current value of the max_indir to the block, then sets the value to the result of the block, unless the block returns nil, of course.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L441","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L441","def":{"name":"max_indir","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_INDIR_MAX) do |curr|\n  yield curr\nend\nself\n"}},{"id":"max_indir=(value:Int32)-instance-method","html_id":"max_indir=(value:Int32)-instance-method","name":"max_indir=","doc":"Limit LibMagic::PARAM_INDIR_MAX to the\ngiven value. This is equivalent to calling `magic_setparam` and passing\nit the constant PARAM_INDIR_MAX and the\ngiven value. See `libmagic(2)`. Controls how many levels of recursion will be followed forindirect magic entries.","summary":"<p>Limit LibMagic::PARAM_INDIR_MAX to the given value.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L441","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L441","def":{"name":"max_indir=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_INDIR_MAX, to: value)\nself\n"}},{"id":"max_name-instance-method","html_id":"max_name-instance-method","name":"max_name","doc":"Get the current limit of the\nLibMagic::PARAM_NAME_MAX libmagic param.\nDefaults to 30. This is the same as calling\nmagic_getparam and passing in the\nPARAM_NAME_MAX constant. See `libmagic(2)`.\nControls the maximum number of calls for name/use.","summary":"<p>Get the current limit of the LibMagic::PARAM_NAME_MAX libmagic param.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L445","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L445","def":{"name":"max_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibMagic.get_param(@checker, LibMagic::PARAM_NAME_MAX, out value)\nvalue\n"}},{"id":"max_name(&block)-instance-method","html_id":"max_name(&amp;block)-instance-method","name":"max_name","doc":"Yields the current value of the max_name to the block, then\nsets the value to the result of the block, unless the block returns\nnil, of course. Controls the maximum number of calls for name/use. Example:\n```\n# doubles the PARAM_NAME_MAX limit\nft_checker = Magic::TypeChecker.new\nft_checker.max_name do |current|\n  current * 2\nend\n```","summary":"<p>Yields the current value of the max_name to the block, then sets the value to the result of the block, unless the block returns nil, of course.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L445","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L445","def":{"name":"max_name","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_NAME_MAX) do |curr|\n  yield curr\nend\nself\n"}},{"id":"max_name=(value:Int32)-instance-method","html_id":"max_name=(value:Int32)-instance-method","name":"max_name=","doc":"Limit LibMagic::PARAM_NAME_MAX to the\ngiven value. This is equivalent to calling `magic_setparam` and passing\nit the constant PARAM_NAME_MAX and the\ngiven value. See `libmagic(2)`. Controls the maximum number of calls for name/use.","summary":"<p>Limit LibMagic::PARAM_NAME_MAX to the given value.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L445","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L445","def":{"name":"max_name=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(LibMagic::PARAM_NAME_MAX, to: value)\nself\n"}},{"id":"no_compression_info-instance-method","html_id":"no_compression_info-instance-method","name":"no_compression_info","doc":"Don't report on compression, only report about the uncompressed data.","summary":"<p>Don't report on compression, only report about the uncompressed data.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L382","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L382","def":{"name":"no_compression_info","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::COMPRESS_TRANSP)\nself\n"}},{"id":"no_compression_info=(setting:Bool)-instance-method","html_id":"no_compression_info=(setting:Bool)-instance-method","name":"no_compression_info=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L382","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L382","def":{"name":"no_compression_info=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::COMPRESS_TRANSP)\nelse\n  unset(LibMagic::COMPRESS_TRANSP)\nend\nself\n"}},{"id":"no_compression_info?-instance-method","html_id":"no_compression_info?-instance-method","name":"no_compression_info?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L382","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L382","def":{"name":"no_compression_info?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::COMPRESS_TRANSP)"}},{"id":"of(file:File)-instance-method","html_id":"of(file:File)-instance-method","name":"of","doc":"Get the filetype \"of\" the given file. Raises Errno if there's an error\nfrom libmagic instead of returning nil.","summary":"<p>Get the filetype \"of\" the given file.</p>","abstract":false,"args":[{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"File"}],"args_string":"(file : File)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L180","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L180","def":{"name":"of","args":[{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"File"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(of?(file)) || (raise(error(\"checking filetype of file #{file}\")))"}},{"id":"of(filepath)-instance-method","html_id":"of(filepath)-instance-method","name":"of","doc":"Get the filetype \"of\" the given file. Raises Errno if there's an error\nfrom libmagic instead of returning nil.","summary":"<p>Get the filetype \"of\" the given file.</p>","abstract":false,"args":[{"name":"filepath","doc":null,"default_value":"","external_name":"filepath","restriction":""}],"args_string":"(filepath)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L174","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L174","def":{"name":"of","args":[{"name":"filepath","doc":null,"default_value":"","external_name":"filepath","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ptr = LibMagic.file(checker, filepath)\nString.new(ptr || (raise(error(\"checking filetype of #{filepath}\"))))\n"}},{"id":"of(this:Int32)-instance-method","html_id":"of(this:Int32)-instance-method","name":"of","doc":null,"summary":null,"abstract":false,"args":[{"name":"this","doc":null,"default_value":"","external_name":"this","restriction":"Int32"}],"args_string":"(this : Int32)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L184","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L184","def":{"name":"of","args":[{"name":"this","doc":null,"default_value":"","external_name":"this","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(of?(this)) || (raise(error(\"checking filetype of file ##{this}\")))"}},{"id":"of(this:IO)-instance-method","html_id":"of(this:IO)-instance-method","name":"of","doc":"Get the filetype \"of\" the given bytes. Raises Errno if there's an error\nfrom libmagic instead of returning nil.","summary":"<p>Get the filetype \"of\" the given bytes.</p>","abstract":false,"args":[{"name":"this","doc":null,"default_value":"","external_name":"this","restriction":"IO"}],"args_string":"(this : IO)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L190","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L190","def":{"name":"of","args":[{"name":"this","doc":null,"default_value":"","external_name":"this","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"some_bytes = this.peek\nif (some_bytes.nil? || some_bytes.empty?)\n  this.read((  some_bytes = Bytes.new(32)))\nend\nif some_bytes.nil? || some_bytes.empty?\n  raise(::Errno.new(\"reading bytes, got #{some_bytes.inspect}\"))\nend\nptr = LibMagic.buffer(checker, some_bytes, some_bytes.size)\nString.new(ptr || (raise(error(\"checking filetype of given byte sequence\"))))\n"}},{"id":"of?(filepath,opts)-instance-method","html_id":"of?(filepath,opts)-instance-method","name":"of?","doc":"Get the filetype \"of\" the given file, passing `opts` to `libmagic(2)`.","summary":"<p>Get the filetype \"of\" the given file, passing <code>opts</code> to <code>libmagic(2)</code>.</p>","abstract":false,"args":[{"name":"filepath","doc":null,"default_value":"","external_name":"filepath","restriction":""},{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""}],"args_string":"(filepath, opts)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L142","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L142","def":{"name":"of?","args":[{"name":"filepath","doc":null,"default_value":"","external_name":"filepath","restriction":""},{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"options = opts\nof(filepath)\n"}},{"id":"of?(file:File)-instance-method","html_id":"of?(file:File)-instance-method","name":"of?","doc":"Get the filetype \"of\" the given file. Returns nil if there's an error\naccessing the file or an internal libmagic error. In this case\n`libmagic(2)` will set `errno(3)` (`Errno.value`).","summary":"<p>Get the filetype \"of\" the given file.</p>","abstract":false,"args":[{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"File"}],"args_string":"(file : File)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L162","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L162","def":{"name":"of?","args":[{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"File"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"of(file.fd)"}},{"id":"of?(bytes:IO)-instance-method","html_id":"of?(bytes:IO)-instance-method","name":"of?","doc":"Get the filetype \"of\" the given file. Returns nil if there's an error\naccessing the file or an internal libmagic error. In this case\n`libmagic(2)` will set `errno(3)` (`Errno.value`).","summary":"<p>Get the filetype \"of\" the given file.</p>","abstract":false,"args":[{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"IO"}],"args_string":"(bytes : IO)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L156","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L156","def":{"name":"of?","args":[{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ptr = LibMagic.buffer(checker, bytes.buffer, bytes.size)\nif ptr.null?\nelse\n  String.new(ptr)\nend\n"}},{"id":"of?(file_descriptor:Int32)-instance-method","html_id":"of?(file_descriptor:Int32)-instance-method","name":"of?","doc":"Get the filetype \"of\" the given file. Returns nil if there's an error\naccessing the file or an internal libmagic error. In this case\n`libmagic(2)` will set `errno(3)` (`Errno.value`).","summary":"<p>Get the filetype \"of\" the given file.</p>","abstract":false,"args":[{"name":"file_descriptor","doc":null,"default_value":"","external_name":"file_descriptor","restriction":"Int32"}],"args_string":"(file_descriptor : Int32)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L167","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L167","def":{"name":"of?","args":[{"name":"file_descriptor","doc":null,"default_value":"","external_name":"file_descriptor","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ptr = LibMagic.descriptor(checker, file_descriptor)\nif ptr.null?\nelse\n  String.new(ptr)\nend\n"}},{"id":"of?(filepath)-instance-method","html_id":"of?(filepath)-instance-method","name":"of?","doc":"Get the filetype \"of\" the given file. Returns nil if there's an error\naccessing the file or an internal libmagic error. In this case\n`libmagic(2)` will set `errno(3)` (`Errno.value`).","summary":"<p>Get the filetype \"of\" the given file.</p>","abstract":false,"args":[{"name":"filepath","doc":null,"default_value":"","external_name":"filepath","restriction":""}],"args_string":"(filepath)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L150","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L150","def":{"name":"of?","args":[{"name":"filepath","doc":null,"default_value":"","external_name":"filepath","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ptr = LibMagic.file(checker, filepath)\nif ptr.null?\nelse\n  String.new(ptr)\nend\n"}},{"id":"options-instance-method","html_id":"options-instance-method","name":"options","doc":"The current value of the magic flags. Equivalent to calling C's\n`magic_getflags()` or LibMagic.flags on this instance.","summary":"<p>The current value of the magic flags.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L228","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L228","def":{"name":"options","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @options === @new_options\n  return @options\nend\nLibMagic.set_flags(@checker, (@options = @new_options))\n@options\n"}},{"id":"options=(options)-instance-method","html_id":"options=(options)-instance-method","name":"options=","doc":"Directly set the options parameter. This overrides all other options (like\ndebug_output, follow_symlinks, etc.). Equivalent to calling C's\n`magic_setflags()` with the given integer. See `libmagic(2)` for more\ndetails. Appropriate values can be bitwise-or'd from LibMagic's constants.","summary":"<p>Directly set the options parameter.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(options)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L221","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L221","def":{"name":"options=","args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@new_options = options\nself\n"}},{"id":"preserve_atime-instance-method","html_id":"preserve_atime-instance-method","name":"preserve_atime","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L370","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L370","def":{"name":"preserve_atime","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::PRESERVE_ATIME)\nself\n"}},{"id":"preserve_atime=(setting:Bool)-instance-method","html_id":"preserve_atime=(setting:Bool)-instance-method","name":"preserve_atime=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L370","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L370","def":{"name":"preserve_atime=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::PRESERVE_ATIME)\nelse\n  unset(LibMagic::PRESERVE_ATIME)\nend\nself\n"}},{"id":"preserve_atime?-instance-method","html_id":"preserve_atime?-instance-method","name":"preserve_atime?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L370","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L370","def":{"name":"preserve_atime?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::PRESERVE_ATIME)"}},{"id":"reset_options-instance-method","html_id":"reset_options-instance-method","name":"reset_options","doc":"reset any options set on this instance back to the magic.cr default.","summary":"<p>reset any options set on this instance back to the magic.cr default.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L235","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L235","def":{"name":"reset_options","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@new_options = DEFAULT_OPTIONS\nself\n"}},{"id":"return_error_as_text-instance-method","html_id":"return_error_as_text-instance-method","name":"return_error_as_text","doc":"Return errors while trying to open files and follow symlinks in thefiletype text rather than raising an error. This differs from the `libmagic` default, because it makes more sense to handle the errors in Crystal in most cases than to output them as text.","summary":"<p>Return errors while trying to open files and follow symlinks in thefiletype text rather than raising an error.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L319","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L319","def":{"name":"return_error_as_text","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"unset(LibMagic::ERROR)\nself\n"}},{"id":"return_error_as_text=(setting:Bool)-instance-method","html_id":"return_error_as_text=(setting:Bool)-instance-method","name":"return_error_as_text=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L319","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L319","def":{"name":"return_error_as_text=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  unset(LibMagic::ERROR)\nelse\n  set(LibMagic::ERROR)\nend\nself\n"}},{"id":"return_error_as_text?-instance-method","html_id":"return_error_as_text?-instance-method","name":"return_error_as_text?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L319","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L319","def":{"name":"return_error_as_text?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(set?(LibMagic::ERROR))"}},{"id":"try_to_preserve_access_time-instance-method","html_id":"try_to_preserve_access_time-instance-method","name":"try_to_preserve_access_time","doc":"On systems that support utime(3) or utimes(2), attempt topreserve the access time of files analysed.","summary":"<p>On systems that support utime(3) or utimes(2), attempt topreserve the access time of files analysed.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L365","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L365","def":{"name":"try_to_preserve_access_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(LibMagic::PRESERVE_ATIME)\nself\n"}},{"id":"try_to_preserve_access_time=(setting:Bool)-instance-method","html_id":"try_to_preserve_access_time=(setting:Bool)-instance-method","name":"try_to_preserve_access_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"args_string":"(setting : Bool)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L365","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L365","def":{"name":"try_to_preserve_access_time=","args":[{"name":"setting","doc":null,"default_value":"","external_name":"setting","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if setting\n  set(LibMagic::PRESERVE_ATIME)\nelse\n  unset(LibMagic::PRESERVE_ATIME)\nend\nself\n"}},{"id":"try_to_preserve_access_time?-instance-method","html_id":"try_to_preserve_access_time?-instance-method","name":"try_to_preserve_access_time?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L365","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L365","def":{"name":"try_to_preserve_access_time?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set?(LibMagic::PRESERVE_ATIME)"}}],"macros":[{"id":"bitflag_option(name,value,docs)-macro","html_id":"bitflag_option(name,value,docs)-macro","name":"bitflag_option","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"docs","doc":null,"default_value":"","external_name":"docs","restriction":""}],"args_string":"(name, value, docs)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L267","def":{"name":"bitflag_option","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"docs","doc":null,"default_value":"","external_name":"docs","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n# \n{{ docs.id }}\n\n\n      def \n{{ name.id }}\n\n        set \n{{ value.id }}\n\n        self\n      \nend\n\n      def \n{{ name.id }}\n?\n        set? \n{{ value.id }}\n\n      \nend\n\n\t    def \n{{ name.id }}\n=(setting : Bool)\n        if setting\n          set \n{{ value.id }}\n\n        \nelse\n          unset \n{{ value.id }}\n\n        \nend\n        self\n      \nend\n    \n"}},{"id":"inverse_bitflag_option(name,value,docs)-macro","html_id":"inverse_bitflag_option(name,value,docs)-macro","name":"inverse_bitflag_option","doc":"semantically-inverted bitflag options. That is, activating the option\ndeactivates the bitflag, as opposed to activating it.","summary":"<p>semantically-inverted bitflag options.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"docs","doc":null,"default_value":"","external_name":"docs","restriction":""}],"args_string":"(name, value, docs)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L290","def":{"name":"inverse_bitflag_option","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"docs","doc":null,"default_value":"","external_name":"docs","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n# \n{{ docs.id }}\n\n\n      def \n{{ name.id }}\n\n        unset \n{{ value.id }}\n\n        self\n      \nend\n\n      def \n{{ name.id }}\n?\n        !set? \n{{ value.id }}\n\n      \nend\n\n\t    def \n{{ name.id }}\n=(setting : Bool)\n        if setting\n          unset \n{{ value.id }}\n\n        \nelse\n          set \n{{ value.id }}\n\n        \nend\n        self\n      \nend\n    \n"}},{"id":"magic_param(method_name,default_value,extra_docs)-macro","html_id":"magic_param(method_name,default_value,extra_docs)-macro","name":"magic_param","doc":null,"summary":null,"abstract":false,"args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""},{"name":"default_value","doc":null,"default_value":"","external_name":"default_value","restriction":""},{"name":"extra_docs","doc":null,"default_value":"","external_name":"extra_docs","restriction":""}],"args_string":"(method_name, default_value, extra_docs)","source_link":"https://github.com/dscottboggs/magic.cr/blob/bd4e44d038d9035f34cbbac0ceaf319061d65494/src/type_checker.cr#L401","def":{"name":"magic_param","args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""},{"name":"default_value","doc":null,"default_value":"","external_name":"default_value","restriction":""},{"name":"extra_docs","doc":null,"default_value":"","external_name":"extra_docs","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n# Limit LibMagic::PARAM_\n{{ method_name.id[4..-1].upcase }}\n_MAX to the\n\n      \n# given value. This is equivalent to calling `magic_setparam` and passing\n\n      \n# it the constant PARAM_\n{{ method_name.id[4..-1].upcase }}\n_MAX and the\n\n      \n# given value. See `libmagic(2)`. \n{{ extra_docs.id }}\n\n\n      def \n{{ method_name.id }}\n=(value : Int32)\n        limit LibMagic::PARAM_\n{{ method_name.id[4..-1].upcase }}\n_MAX, to: value\n        self\n      \nend\n      \n# Yields the current value of the \n{{ method_name.id }}\n to the block, then\n\n      \n# sets the value to the result of the block, unless the block returns\n\n      \n# nil, of course. \n{{ extra_docs.id }}\n Example:\n\n      \n# ```\n\n      \n# # doubles the PARAM_\n{{ method_name.id[4..-1].upcase }}\n_MAX limit\n\n      \n# ft_checker = Magic::TypeChecker.new\n\n      \n# ft_checker.\n{{ method_name.id }}\n do |current|\n\n      \n#   current * 2\n\n      \n# end\n\n      \n# ```\n\n      def \n{{ method_name.id }}\n\n        limit(LibMagic::PARAM_\n{{ method_name.id[4..-1].upcase }}\n_MAX) do |curr|\n          yield curr\n        \nend\n        self\n      \nend\n\n      \n# Get the current limit of the\n\n      \n# LibMagic::PARAM_\n{{ method_name.id[4..-1].upcase }}\n_MAX libmagic param.\n\n      \n# Defaults to \n{{ default_value }}\n. This is the same as calling\n\n      \n# magic_getparam and passing in the\n\n      \n# PARAM_\n{{ method_name.id[4..-1].upcase }}\n_MAX constant. See `libmagic(2)`.\n\n      \n# \n{{ extra_docs.id }}\n\n\n      def \n{{ method_name.id }}\n\n        LibMagic.get_param(@checker,\n                           LibMagic::PARAM_\n{{ method_name.id[4..-1].upcase }}\n_MAX,\n                           out value)\n        value\n      \nend\n    \n"}}],"types":[]}]}]}})